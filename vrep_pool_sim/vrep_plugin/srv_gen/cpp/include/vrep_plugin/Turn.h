/* Auto-generated by genmsg_cpp for file /home/daniel/fuerte_workspace/sandbox/vrep_pool_sim/vrep_plugin/srv/Turn.srv */
#ifndef VREP_PLUGIN_SERVICE_TURN_H
#define VREP_PLUGIN_SERVICE_TURN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_plugin
{
template <class ContainerAllocator>
struct TurnRequest_ {
  typedef TurnRequest_<ContainerAllocator> Type;

  TurnRequest_()
  : angle(0.0)
  , power(0.0)
  {
  }

  TurnRequest_(const ContainerAllocator& _alloc)
  : angle(0.0)
  , power(0.0)
  {
  }

  typedef float _angle_type;
  float angle;

  typedef float _power_type;
  float power;


  typedef boost::shared_ptr< ::vrep_plugin::TurnRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_plugin::TurnRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TurnRequest
typedef  ::vrep_plugin::TurnRequest_<std::allocator<void> > TurnRequest;

typedef boost::shared_ptr< ::vrep_plugin::TurnRequest> TurnRequestPtr;
typedef boost::shared_ptr< ::vrep_plugin::TurnRequest const> TurnRequestConstPtr;


template <class ContainerAllocator>
struct TurnResponse_ {
  typedef TurnResponse_<ContainerAllocator> Type;

  TurnResponse_()
  : score(0)
  {
  }

  TurnResponse_(const ContainerAllocator& _alloc)
  : score(0)
  {
  }

  typedef int32_t _score_type;
  int32_t score;


  typedef boost::shared_ptr< ::vrep_plugin::TurnResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_plugin::TurnResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TurnResponse
typedef  ::vrep_plugin::TurnResponse_<std::allocator<void> > TurnResponse;

typedef boost::shared_ptr< ::vrep_plugin::TurnResponse> TurnResponsePtr;
typedef boost::shared_ptr< ::vrep_plugin::TurnResponse const> TurnResponseConstPtr;

struct Turn
{

typedef TurnRequest Request;
typedef TurnResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Turn
} // namespace vrep_plugin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::TurnRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::TurnRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_plugin::TurnRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae900cd85006e289b45ba5c8c98cce4f";
  }

  static const char* value(const  ::vrep_plugin::TurnRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae900cd85006e289ULL;
  static const uint64_t static_value2 = 0xb45ba5c8c98cce4fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_plugin::TurnRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/TurnRequest";
  }

  static const char* value(const  ::vrep_plugin::TurnRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_plugin::TurnRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 angle\n\
float32 power\n\
\n\
";
  }

  static const char* value(const  ::vrep_plugin::TurnRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_plugin::TurnRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::TurnResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::TurnResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_plugin::TurnResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ed963831938da1fc8151b77dec7741f";
  }

  static const char* value(const  ::vrep_plugin::TurnResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ed963831938da1fULL;
  static const uint64_t static_value2 = 0xc8151b77dec7741fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_plugin::TurnResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/TurnResponse";
  }

  static const char* value(const  ::vrep_plugin::TurnResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_plugin::TurnResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 score\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_plugin::TurnResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_plugin::TurnResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_plugin::TurnRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
    stream.next(m.power);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TurnRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_plugin::TurnResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.score);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TurnResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_plugin::Turn> {
  static const char* value() 
  {
    return "77743d160fcb6c8057dc6d1329fd8fdb";
  }

  static const char* value(const vrep_plugin::Turn&) { return value(); } 
};

template<>
struct DataType<vrep_plugin::Turn> {
  static const char* value() 
  {
    return "vrep_plugin/Turn";
  }

  static const char* value(const vrep_plugin::Turn&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_plugin::TurnRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "77743d160fcb6c8057dc6d1329fd8fdb";
  }

  static const char* value(const vrep_plugin::TurnRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_plugin::TurnRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn";
  }

  static const char* value(const vrep_plugin::TurnRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_plugin::TurnResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "77743d160fcb6c8057dc6d1329fd8fdb";
  }

  static const char* value(const vrep_plugin::TurnResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_plugin::TurnResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn";
  }

  static const char* value(const vrep_plugin::TurnResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_PLUGIN_SERVICE_TURN_H

