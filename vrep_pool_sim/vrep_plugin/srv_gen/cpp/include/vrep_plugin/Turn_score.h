/* Auto-generated by genmsg_cpp for file /home/daniel/fuerte_workspace/sandbox/vrep_pool_sim/vrep_plugin/srv/Turn_score.srv */
#ifndef VREP_PLUGIN_SERVICE_TURN_SCORE_H
#define VREP_PLUGIN_SERVICE_TURN_SCORE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "vrep_plugin/Turn.h"



namespace vrep_plugin
{
template <class ContainerAllocator>
struct Turn_scoreRequest_ {
  typedef Turn_scoreRequest_<ContainerAllocator> Type;

  Turn_scoreRequest_()
  : turn_data()
  {
  }

  Turn_scoreRequest_(const ContainerAllocator& _alloc)
  : turn_data(_alloc)
  {
  }

  typedef  ::vrep_plugin::Turn_<ContainerAllocator>  _turn_data_type;
   ::vrep_plugin::Turn_<ContainerAllocator>  turn_data;


  typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Turn_scoreRequest
typedef  ::vrep_plugin::Turn_scoreRequest_<std::allocator<void> > Turn_scoreRequest;

typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreRequest> Turn_scoreRequestPtr;
typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreRequest const> Turn_scoreRequestConstPtr;


template <class ContainerAllocator>
struct Turn_scoreResponse_ {
  typedef Turn_scoreResponse_<ContainerAllocator> Type;

  Turn_scoreResponse_()
  : score(0)
  {
  }

  Turn_scoreResponse_(const ContainerAllocator& _alloc)
  : score(0)
  {
  }

  typedef int32_t _score_type;
  int32_t score;


  typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Turn_scoreResponse
typedef  ::vrep_plugin::Turn_scoreResponse_<std::allocator<void> > Turn_scoreResponse;

typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreResponse> Turn_scoreResponsePtr;
typedef boost::shared_ptr< ::vrep_plugin::Turn_scoreResponse const> Turn_scoreResponseConstPtr;

struct Turn_score
{

typedef Turn_scoreRequest Request;
typedef Turn_scoreResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Turn_score
} // namespace vrep_plugin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0ee16889eef178fd61eaf4a0d13cd08a";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0ee16889eef178fdULL;
  static const uint64_t static_value2 = 0x61eaf4a0d13cd08aULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn_scoreRequest";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn turn_data\n\
\n\
================================================================================\n\
MSG: vrep_plugin/Turn\n\
float32 angle\n\
float32 power\n\
\n\
";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ed963831938da1fc8151b77dec7741f";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ed963831938da1fULL;
  static const uint64_t static_value2 = 0xc8151b77dec7741fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn_scoreResponse";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 score\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_plugin::Turn_scoreRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.turn_data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Turn_scoreRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_plugin::Turn_scoreResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.score);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Turn_scoreResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_plugin::Turn_score> {
  static const char* value() 
  {
    return "cf114221970573a59c393bab275b9be4";
  }

  static const char* value(const vrep_plugin::Turn_score&) { return value(); } 
};

template<>
struct DataType<vrep_plugin::Turn_score> {
  static const char* value() 
  {
    return "vrep_plugin/Turn_score";
  }

  static const char* value(const vrep_plugin::Turn_score&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf114221970573a59c393bab275b9be4";
  }

  static const char* value(const vrep_plugin::Turn_scoreRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_plugin::Turn_scoreRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn_score";
  }

  static const char* value(const vrep_plugin::Turn_scoreRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf114221970573a59c393bab275b9be4";
  }

  static const char* value(const vrep_plugin::Turn_scoreResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_plugin::Turn_scoreResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn_score";
  }

  static const char* value(const vrep_plugin::Turn_scoreResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_PLUGIN_SERVICE_TURN_SCORE_H

