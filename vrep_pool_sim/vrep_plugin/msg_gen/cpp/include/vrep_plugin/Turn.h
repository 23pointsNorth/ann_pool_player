/* Auto-generated by genmsg_cpp for file /home/daniel/fuerte_workspace/sandbox/vrep_pool_sim/vrep_plugin/msg/Turn.msg */
#ifndef VREP_PLUGIN_MESSAGE_TURN_H
#define VREP_PLUGIN_MESSAGE_TURN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace vrep_plugin
{
template <class ContainerAllocator>
struct Turn_ {
  typedef Turn_<ContainerAllocator> Type;

  Turn_()
  : angle(0.0)
  , power(0.0)
  {
  }

  Turn_(const ContainerAllocator& _alloc)
  : angle(0.0)
  , power(0.0)
  {
  }

  typedef float _angle_type;
  float angle;

  typedef float _power_type;
  float power;


  typedef boost::shared_ptr< ::vrep_plugin::Turn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_plugin::Turn_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Turn
typedef  ::vrep_plugin::Turn_<std::allocator<void> > Turn;

typedef boost::shared_ptr< ::vrep_plugin::Turn> TurnPtr;
typedef boost::shared_ptr< ::vrep_plugin::Turn const> TurnConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrep_plugin::Turn_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrep_plugin::Turn_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrep_plugin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_plugin::Turn_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_plugin::Turn_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ae900cd85006e289b45ba5c8c98cce4f";
  }

  static const char* value(const  ::vrep_plugin::Turn_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xae900cd85006e289ULL;
  static const uint64_t static_value2 = 0xb45ba5c8c98cce4fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_plugin::Turn_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_plugin/Turn";
  }

  static const char* value(const  ::vrep_plugin::Turn_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_plugin::Turn_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 angle\n\
float32 power\n\
\n\
";
  }

  static const char* value(const  ::vrep_plugin::Turn_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_plugin::Turn_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_plugin::Turn_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
    stream.next(m.power);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Turn_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_plugin::Turn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrep_plugin::Turn_<ContainerAllocator> & v) 
  {
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VREP_PLUGIN_MESSAGE_TURN_H

