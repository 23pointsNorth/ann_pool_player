"""autogenerated by genpy from vrep_plugin/Pool_table_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Pool_table_state(genpy.Message):
  _md5sum = "d77375b50bdafc81f2a2287c1843bbde"
  _type = "vrep_plugin/Pool_table_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32[15] balls
geometry_msgs/Point32 white_ball
geometry_msgs/Point32 cue_position
float32[3] cue_orientation

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['balls','white_ball','cue_position','cue_orientation']
  _slot_types = ['geometry_msgs/Point32[15]','geometry_msgs/Point32','geometry_msgs/Point32','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       balls,white_ball,cue_position,cue_orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pool_table_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.balls is None:
        self.balls = [geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32()]
      if self.white_ball is None:
        self.white_ball = geometry_msgs.msg.Point32()
      if self.cue_position is None:
        self.cue_position = geometry_msgs.msg.Point32()
      if self.cue_orientation is None:
        self.cue_orientation = [0.,0.,0.]
    else:
      self.balls = [geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32(),geometry_msgs.msg.Point32()]
      self.white_ball = geometry_msgs.msg.Point32()
      self.cue_position = geometry_msgs.msg.Point32()
      self.cue_orientation = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6f.pack(_x.white_ball.x, _x.white_ball.y, _x.white_ball.z, _x.cue_position.x, _x.cue_position.y, _x.cue_position.z))
      buff.write(_struct_3f.pack(*self.cue_orientation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.balls is None:
        self.balls = None
      if self.white_ball is None:
        self.white_ball = geometry_msgs.msg.Point32()
      if self.cue_position is None:
        self.cue_position = geometry_msgs.msg.Point32()
      end = 0
      self.balls = []
      for i in range(0, 15):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.balls.append(val1)
      _x = self
      start = end
      end += 24
      (_x.white_ball.x, _x.white_ball.y, _x.white_ball.z, _x.cue_position.x, _x.cue_position.y, _x.cue_position.z,) = _struct_6f.unpack(str[start:end])
      start = end
      end += 12
      self.cue_orientation = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.balls:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6f.pack(_x.white_ball.x, _x.white_ball.y, _x.white_ball.z, _x.cue_position.x, _x.cue_position.y, _x.cue_position.z))
      buff.write(self.cue_orientation.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.balls is None:
        self.balls = None
      if self.white_ball is None:
        self.white_ball = geometry_msgs.msg.Point32()
      if self.cue_position is None:
        self.cue_position = geometry_msgs.msg.Point32()
      end = 0
      self.balls = []
      for i in range(0, 15):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.balls.append(val1)
      _x = self
      start = end
      end += 24
      (_x.white_ball.x, _x.white_ball.y, _x.white_ball.z, _x.cue_position.x, _x.cue_position.y, _x.cue_position.z,) = _struct_6f.unpack(str[start:end])
      start = end
      end += 12
      self.cue_orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
_struct_6f = struct.Struct("<6f")
