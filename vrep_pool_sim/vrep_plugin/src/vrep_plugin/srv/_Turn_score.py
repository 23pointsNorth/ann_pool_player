"""autogenerated by genpy from vrep_plugin/Turn_scoreRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vrep_plugin.msg

class Turn_scoreRequest(genpy.Message):
  _md5sum = "0ee16889eef178fd61eaf4a0d13cd08a"
  _type = "vrep_plugin/Turn_scoreRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """vrep_plugin/Turn turn_data

================================================================================
MSG: vrep_plugin/Turn
float32 angle
float32 power

"""
  __slots__ = ['turn_data']
  _slot_types = ['vrep_plugin/Turn']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       turn_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Turn_scoreRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.turn_data is None:
        self.turn_data = vrep_plugin.msg.Turn()
    else:
      self.turn_data = vrep_plugin.msg.Turn()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.turn_data.angle, _x.turn_data.power))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.turn_data is None:
        self.turn_data = vrep_plugin.msg.Turn()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.turn_data.angle, _x.turn_data.power,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.turn_data.angle, _x.turn_data.power))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.turn_data is None:
        self.turn_data = vrep_plugin.msg.Turn()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.turn_data.angle, _x.turn_data.power,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
"""autogenerated by genpy from vrep_plugin/Turn_scoreResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Turn_scoreResponse(genpy.Message):
  _md5sum = "2ed963831938da1fc8151b77dec7741f"
  _type = "vrep_plugin/Turn_scoreResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 score


"""
  __slots__ = ['score']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Turn_scoreResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.score is None:
        self.score = 0
    else:
      self.score = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.score))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.score,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.score))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.score,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class Turn_score(object):
  _type          = 'vrep_plugin/Turn_score'
  _md5sum = 'cf114221970573a59c393bab275b9be4'
  _request_class  = Turn_scoreRequest
  _response_class = Turn_scoreResponse
